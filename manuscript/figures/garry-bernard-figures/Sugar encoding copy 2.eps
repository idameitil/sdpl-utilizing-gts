%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.3.1 (Build 22E261) Quartz PS Context)
%%Title: Sugar encoding copy 2.eps
%%Creator: ChemDraw(tm) 22.2.0.3348
%%CreationDate: 2023-09-05 13:23:38 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 465 144
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2023 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 465 144
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SFCJBB+Helvetica
%!FontType1-1.0: SFCJBB+Helvetica 1.0000.0.0000
14 dict begin
/FontName /SFCJBB+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /O put
dup 34 /H put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<





1DB802ABB21F201EB8012540111F1C1D931F3A1D4C1F1E1D45273A1D4527BB01AA019B002A019BB2254A1FBA019B0025017AB349293896B8017BB348283125B8017A403648289629482725294C1F252946272729482756C80784075B07410732072B072807260721071B071408120810080E080C080A08080807B801ACB23F1F06BB01AB003F001F01ABB308060805B801AEB23F1F04BB01AD003F001F01ADB70804080208000814B8FFE0B40000010014B801ABB41000000100B801ABB606100000010006B801ADB300000100B801AD401F04000001000410000001001002000001000200000001000002010802004A00B0018DB806008516763F183F123E113946443E113946443E113946443E113946443E113946443E11394660443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B18011DB0964B5358B0AA1D59B0324B5358B0FF1D592B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B74752B2B2B65422B2B4B5279B376706A66456523456023456560234560B08B766818B080622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A620456944750000
00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/H 1 def
/O 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4052586 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28024022816FF807CAF9CEF58EA120E680185C875EBD525A3037498B511C49FE7CD2D3023036A80F70B3528B903FDCAD6C2EF0AB2756BC9F72E3B5E23BF734E5C02083FB8547C33AF3485E327379B3F1005D3D581FF1BEAF8298B39E0AD0D62613C314F709724F335E0FB7AD5A93F35B31E4554CB1036504F462C49F0E6153FDCC2ACC4698E9D9AC52AF096EBB93307288B8A9C4EF54AE2ABB1D2B86F67F97E7C3FD9D0A8AAF9BE94D3A40A862E331149B74738A84EDA87629B6248A5207AE3F94798C3675F188FF1A6630C6E3EB4521BB6FB88738853076F59B6181967A4E706B57AE93628A6B13B467E0EA66D1030ADC194DC080773DC85201CD5AB466B0DF7B18E1105E697F7B549FDDB1A6EACF4B0F7B7BEC29DB0FB8DE0B875BFCA9067FEDC76F5A30345BD0719DDDFB92FD292BDD61A267BA1A623B526297C3204CED9057686D91F58D4489AD211ADF64A5AA1D19754903BE5FC1BD2CEE5A40D3B8A4DA6D1FDB793B7EFE82B3847DFA65A46A0102F476E880E6289300A00971EE02AA8A1A021B99EB7D0746AFB8EBB0B544D7C005911F8C508D8FD5D74A1ED361D35D10228961BA264068F942D81FC41264472DACB17F573B57559C40AC67733C9043E98A73F5B106A5B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/SFCJBB+Helvetica cguidfix
/F1.1/SFCJBB+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 0 465 144 rc
-0.050000001 144 m
465.04999 144 l
465.04999 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
0 sc
1 0 0 -1 247.10083 122.41909 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(!)s
CM
254.57605 114.10043 m
255.30986 114.77978 l
280.94623 87.089653 l
280.54999 86.780014 l
279.47284 87.24955 l
254.57605 114.10043 l
h
f
279.47284 87.24955 m
280.54999 86.780014 l
280.27185 86.31456 l
242.64062 86.256851 l
237.14 89.100006 l
237.90291 92.014633 l
279.47284 87.24955 l
h
f
200.10686 70.810143 m
198.70999 68.030014 l
194.56445 68.472061 l
169.23375 99.307526 l
169.23999 99.980011 l
170.29182 99.445786 l
200.10686 70.810143 l
h
f
170.29182 99.445786 m
169.23999 99.980011 l
169.04337 100.49685 l
210.06133 98.156647 l
212.73 97.570007 l
212.84755 97.05938 l
170.29182 99.445786 l
h
f
245.7332 116.37669 m
246.21681 115.50141 l
212.84755 97.05938 l
212.73 97.570007 l
212.69054 98.112595 l
245.7332 116.37669 l
h
f
1 0 0 -1 136.45915 82.869087 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
169.04337 100.49685 m
169.23999 99.980011 l
169.23375 99.307526 l
152.09277 82.811996 l
151.39995 83.533112 l
169.04337 100.49685 l
h
f
1 0 0 -1 160.86084 72.459084 cm
0 7.3681641 m
(!)s
CM
194.56445 68.472061 m
198.70999 68.030014 l
201.31491 67.382683 l
170.23885 68.133522 l
170.26004 69.133293 l
194.56445 68.472061 l
h
f
1 0 0 -1 259.33081 77.989098 cm
0 7.3681641 m
(!")[ 7.778320 0.000000 ] xS
CM
238.83437 87.665253 m
237.14 89.100006 l
242.64062 86.256851 l
258.53885 77.515167 l
258.0448 76.645737 l
238.83437 87.665253 l
h
f
212.69054 98.112595 m
212.73 97.570007 l
210.06133 98.156647 l
184.25191 107.97299 l
185.10794 108.71577 l
212.69054 98.112595 l
h
f
237.90291 92.014633 m
237.14 89.100006 l
238.83437 87.665253 l
201.31491 67.382683 l
198.70999 68.030014 l
200.10686 70.810143 l
237.90291 92.014633 l
h
f
1 0 0 -1 166.87915 141.30908 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
185.10794 108.71577 m
184.25191 107.97299 l
178.82579 131.71179 l
179.80055 131.93507 l
185.10794 108.71577 l
h
f
1 0 0 -1 402.54083 88.249092 cm
0 7.3681641 m
(!)s
CM
409.48822 79.522339 m
410.29474 80.113556 l
432.6478 49.62645 l
432.15997 49.440002 l
431.14322 50.029675 l
409.48822 79.522339 l
h
f
431.14322 50.029675 m
432.15997 49.440002 l
431.716 49.038414 l
394.43103 53.256306 l
389.28998 56.710007 l
390.3811 59.518311 l
431.14322 50.029675 l
h
f
350.40558 42.77227 m
348.70001 40.170013 l
344.71054 40.955769 l
322.94534 74.672508 l
323.07999 75.280014 l
324.06396 74.628685 l
350.40558 42.77227 l
h
f
324.06396 74.628685 m
323.07999 75.280014 l
322.99759 75.805473 l
363.42752 68.788498 l
366.01001 67.900009 l
366.06839 67.379242 l
324.06396 74.628685 l
h
f
400.99838 82.84465 m
401.37906 81.919945 l
366.06839 67.379242 l
366.01001 67.900009 l
366.03287 68.443657 l
400.99838 82.84465 l
h
f
1 0 0 -1 293.11084 65.959084 cm
0 7.3681641 m
(!)s
CM
322.99759 75.805473 m
323.07999 75.280014 l
322.94534 74.672508 l
302.34781 64.362923 l
301.90085 65.257484 l
322.99759 75.805473 l
h
f
1 0 0 -1 307.82916 47.229088 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
344.71054 40.955769 m
348.70001 40.170013 l
351.28528 39.26614 l
324.30331 42.413113 l
324.41516 43.406837 l
344.71054 40.955769 l
h
f
1 0 0 -1 431.58081 23.329092 cm
0 7.3681641 m
(!)s
CM
431.716 49.038414 m
432.15997 49.440002 l
432.6478 49.62645 l
435.33685 25.351599 l
434.34296 25.241276 l
431.716 49.038414 l
h
f
1 0 0 -1 409.62085 42.719093 cm
0 7.3681641 m
(!")[ 7.778320 0.000000 ] xS
CM
390.81009 55.091232 m
389.28998 56.710007 l
394.43103 53.256306 l
409.17386 42.798153 l
408.58383 41.990772 l
390.81009 55.091232 l
h
f
366.03287 68.443657 m
366.01001 67.900009 l
363.42752 68.788498 l
338.91168 81.505707 l
339.84708 82.145416 l
366.03287 68.443657 l
h
f
390.3811 59.518311 m
389.28998 56.710007 l
390.81009 55.091232 l
351.28528 39.26614 l
348.70001 40.170013 l
350.40558 42.77227 l
390.3811 59.518311 l
h
f
1 0 0 -1 324.96915 115.35909 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
339.84708 82.145416 m
338.91168 81.505707 l
336.23306 105.7388 l
337.22696 105.84912 l
339.84708 82.145416 l
h
f
1 0 0 -1 114.05083 80.30909 cm
0 7.3681641 m
(!)s
CM
120.81019 71.471413 m
121.63811 72.032249 l
142.37383 41.390697 l
142.34 40.580002 l
141.34615 41.2066 l
120.81019 71.471413 l
h
f
141.34615 41.2066 m
142.34 40.580002 l
142.53442 40.003654 l
104.78984 45.779671 l
99.779999 49.420013 l
100.97501 52.185871 l
141.34615 41.2066 l
h
f
60.40099 36.937 m
58.599991 34.400009 l
54.64312 35.331573 l
33.837124 70.210976 l
34.299988 70.430008 l
35.258972 69.74305 l
60.40099 36.937 l
h
f
35.258972 69.74305 m
34.299988 70.430008 l
34.691383 70.851768 l
74.370216 62.46307 l
76.919998 61.480011 l
76.959053 60.957489 l
35.258972 69.74305 l
h
f
112.46212 75.113747 m
112.80798 74.175461 l
76.959053 60.957489 l
76.919998 61.480011 l
76.962921 62.022339 l
112.46212 75.113747 l
h
f
1 0 0 -1 15.419159 103.10909 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
34.691383 70.851768 m
34.299988 70.430008 l
33.837124 70.210976 l
27.57869 93.559914 l
28.544552 93.818962 l
34.691383 70.851768 l
h
f
1 0 0 -1 25.10083 42.549095 cm
0 7.3681641 m
(!)s
CM
54.64312 35.331573 m
58.599991 34.400009 l
61.151665 33.40144 l
34.318199 37.535461 l
34.466488 38.524403 l
54.64312 35.331573 l
h
f
1 0 0 -1 119.44083 34.549095 cm
0 7.3681641 m
(!")[ 7.778320 0.000000 ] xS
CM
101.23965 47.746044 m
99.779999 49.420013 l
104.78984 45.779671 l
119.14971 34.77496 l
118.53032 33.98988 l
101.23965 47.746044 l
h
f
76.962921 62.022339 m
76.919998 61.480011 l
74.370216 62.46307 l
50.339951 76.063492 l
51.298439 76.668434 l
76.962921 62.022339 l
h
f
100.97501 52.185871 m
99.779999 49.420013 l
101.23965 47.746044 l
61.151665 33.40144 l
58.599991 34.400009 l
60.40099 36.937 l
100.97501 52.185871 l
h
f
1 0 0 -1 37.51915 109.99909 cm
0 7.3681641 m
("!)[ 7.221680 0.000000 ] xS
CM
51.298439 76.668434 m
50.339951 76.063492 l
48.564384 100.36387 l
49.561691 100.4372 l
51.298439 76.668434 l
h
f
294.18402 67.343948 m
293.35345 66.787041 l
280.27185 86.31456 l
280.54999 86.780014 l
280.96527 87.058464 l
294.18402 67.343948 l
h
f
160.6947 64.455513 m
161.47728 63.832958 l
142.53442 40.003654 l
142.34 40.580002 l
142.37383 41.390697 l
160.6947 64.455513 l
h
f
25.094372 43.397545 m
23.094904 39.933136 l
22.228802 40.433002 l
24.22827 43.897411 l
25.094372 43.397545 l
h
f
22.565804 44.856895 m
20.566338 41.392487 l
19.700235 41.892353 l
21.699701 45.356762 l
22.565804 44.856895 l
h
f
20.037237 46.316246 m
18.037769 42.851837 l
17.171667 43.351704 l
19.171135 46.816113 l
20.037237 46.316246 l
h
f
17.508671 47.775597 m
15.509203 44.311188 l
14.643101 44.811054 l
16.642569 48.275463 l
17.508671 47.775597 l
h
f
14.980103 49.234947 m
12.980637 45.770538 l
12.114534 46.270405 l
14.114001 49.734814 l
14.980103 49.234947 l
h
f
12.451536 50.694298 m
10.452069 47.229889 l
9.5859671 47.729755 l
11.585434 51.194164 l
12.451536 50.694298 l
h
f
9.9229698 52.153648 m
7.9235024 48.68924 l
7.0574002 49.189106 l
9.0568676 52.653515 l
9.9229698 52.153648 l
h
f
7.394403 53.612999 m
5.3949356 50.14859 l
4.5288334 50.648457 l
6.5283008 54.112865 l
7.394403 53.612999 l
h
f
4.8658361 55.07235 m
2.8663685 51.607941 l
2.0002663 52.107807 l
3.9997337 55.572216 l
4.8658361 55.07235 l
h
f
439.4068 15.037606 m
441.40683 18.501682 l
442.27286 18.001671 l
440.27283 14.537595 l
439.4068 15.037606 l
h
f
441.92896 13.581403 m
443.92899 17.045479 l
444.79501 16.545469 l
442.79495 13.081392 l
441.92896 13.581403 l
h
f
444.45108 12.1252 m
446.45114 15.589276 l
447.31714 15.089266 l
445.31711 11.625189 l
444.45108 12.1252 l
h
f
446.97324 10.668997 m
448.97327 14.133074 l
449.83929 13.633063 l
447.83926 10.168986 l
446.97324 10.668997 l
h
f
449.49539 9.2127943 m
451.49542 12.676871 l
452.36145 12.17686 l
450.36139 8.7127838 l
449.49539 9.2127943 l
h
f
452.01752 7.7565913 m
454.01758 11.220668 l
454.88358 10.720657 l
452.88354 7.2565808 l
452.01752 7.7565913 l
h
f
454.53967 6.3003888 m
456.5397 9.7644653 l
457.40573 9.2644548 l
455.4057 5.8003778 l
454.53967 6.3003888 l
h
f
457.0618 4.8441858 m
459.06186 8.3082628 l
459.92789 7.8082514 l
457.92783 4.3441749 l
457.0618 4.8441858 l
h
f
459.58395 3.3879828 m
461.58398 6.8520594 l
462.45001 6.3520489 l
460.44998 2.8879721 l
459.58395 3.3879828 l
h
f
ep
end
%%Trailer
%%EOF
