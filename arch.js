const architectures = {
    'X614, ACD37165.1': '________====================______======================-----====================______==========================----------------------------------=================_____===============----================_________======================---------------------------------------------------------------------------=======================______================-----------===================______',
    'X609, CAI34254.1': '_____===============--------------=================______=======================-------======================___============================--------------------------------------------------=================_____============----================_____========================---------------------------------------------------------------==============_______==============-------==============_______________',
    'X607, CAI34124.1': '________====================---=======================______======================-------=========================____==============================-----------------------=====================_____============---===================__________===================----------------------------------------------------------------------------=======================___===================--------==============________',
    'X613, CAI33309.1': '===============================--------====================================================---=============______========================---------------------------=================______=================---===================_______======================------------------------------------------------------------------===============_______===============-----------========______________',
    'X605, BAQ02088.1': '________==============-----------===============_______================================------=========================_______======================-------------------------------------====================_____================---=============_________=======================----------------------------------------------------------------------------------==================_______==============---------======================',
    'X617, AHB32215.1': '================_______==================--------------------------------------------------=====================____==================--==================___=============--=============_____===========================-----------------------=============___===================--=========================___=======================-------------------------',
    'X610, AHB32411.1': '========================------------===========================__________====================-------------------------======================___===============----================_____===========================-------------------------------------------------------------------------------------------------------===================____=================---------=============__________',
    'X612, BAQ00653.1': '===================_______===================---------==========================_____________=========================-----------------------=======================____===================-----=============_____====================------------------------------------------------------------------------------------======================___===============---========================_______',
    'X606, CBN82200.1': '=====================__________======================---------------===========================______________====================------------------------------------====================___==================-----================_______======================---------------------------------------------------------------------------------------==========================___============--------------============================',
    'X611, CDF66396.1': '____===========================-------------===============________======================------====================__________________======================--------------------------=======================____================----================_______================--------------------------------------------------------------------------------------------=====================_____==============-------------=======================__',
    'X608, AHB32490.1': '______======================----===================_________====================------------------------=====================_________________==============================-----------------======================___====================----================______=======================---------------------------------------------------------------------------------------------------------==================_____==================---=================______'
 }
const conservedResidues = {
    'X614, ACD37165.1': {206: 'R', 258: 'R', 291: 'E', 346: 'N'},
    'X609, CAI34254.1': {171: 'Q', 182: 'R', 183: 'N', 189: 'E', 272: 'K', 277: 'S', 281: 'R'},
    'X607, CAI34124.1': {267: 'R', 301: 'S', 304: 'Y', 325: 'D'},
    'X617, AHB32215.1': {46: 'D', 53: 'Y', 137: 'R', 171: 'H', 219: 'Y', 283: 'R'},
    'X610, AHB32411.1': {162: 'R', 207: 'R', 242: 'Y', 244: 'Y', 251: 'N'},
    'X605, BAQ02088.1': {228: 'R', 307: 'S', 339: 'Y', 343: 'D', 348: 'R', 395: 'K'},
    'X613, CAI33309.1': {150: 'R', 266: 'R', 304: 'D'},
    'X612, BAQ00653.1': {246: 'Y', 301: 'N'},
    'X606, CBN82200.1': {211: 'K', 270: 'R'},
    'X611, CDF66396.1': {168: 'Y', 171: 'R', 185: 'Y', 228: 'K', 284: 'R', 345: 'N'},
    'X608, AHB32490.1': {175: 'Y', 238: 'R', 287: 'R', 429: 'R'}
}
const colorScheme = [
    {
        color: [255, 165, 0],
        members: ['G', 'A', 'S', 'T']
    },
    {
        color: [0, 255, 0],
        members: ['C', 'V', 'I', 'L', 'P', 'F', 'Y', 'M', 'W']
    },
    {
        color: [255, 0, 255],
        members: ['N', 'Q', 'H']
    },
    {
        color: [255, 0, 0],
        members: ['D', 'E']
    },
    {
        color: [0, 0, 255],
        members: ['K', 'R']
    }
]

const canvasWidth = 10000;
const canvasHeight = 3000;
const spaceBetweenArchitectures = 200;

function setup(){
    background(255);
    //noStroke();
    createCanvas(canvasWidth, canvasHeight);
    let i = 0;
    for(const architectureName in architectures){
        const y = spaceBetweenArchitectures/2+i*spaceBetweenArchitectures;
        drawArchitectureName(architectureName, i*20);
        drawArchitecture(architectures[architectureName], conservedResidues[architectureName], y);
        i++;
    }
}

const unitSize = 20;
function drawArchitecture(architectureString, conservedResidues, y){
    for(const i in architectureString){
        const fillConserved = (...v) => !conservedResidues[i]?fill(...v):fill(0);
        switch(architectureString[i]){
            case '-':
                fillConserved(200);
                drawOutside(i*unitSize, y);
                break;
            case '_':
                fillConserved(200);
                drawInside(i*unitSize, y); 
                break;
            case '=':
                fillConserved(45, 130, 80);
                drawHelix(i*unitSize, y, !!conservedResidues[i]);
                break;
        }
        drawConservedResidue(conservedResidues[i], i*unitSize, y);
    }
}

function getColor(conservedResidue){
    let scheme = colorScheme.filter(({members})=> members.includes(conservedResidue));
    if(scheme.length === 0){
        throw "No color scheme defined for "+conservedResidue;
    }
    return scheme[0].color;
}

function drawConservedResidue(conservedResidue, x, y){
    const size = 140;
    if(!conservedResidue){
        return;
    }
    const color = getColor(conservedResidue);
    textSize(size);
    fill(...color);
    text(conservedResidue, x-size/4, y-5);
}

function drawInside(x, y){
    noStroke();
    rect(x, y+unitSize*.75, unitSize, unitSize*.25)
}

function drawOutside(x, y){
    noStroke();
    rect(x, y, unitSize, unitSize*.25);
}

function drawHelix(x, y, hasConservedResidue){
    if(hasConservedResidue){
        square(x, y, unitSize);
        return;
    }
    let i;
    for(i = 0; i<unitSize/2; i++){
        stroke(map(i, 0, unitSize/2, 0, 255));
        line(x+i, y, x+i, y+unitSize);
    }
    for(; i< unitSize; i++){
        stroke(map(i, unitSize/2, unitSize, 255, 0));
        line(x+i, y, x+i, y+unitSize);
    }
}

function drawArchitectureName(text, y){

}